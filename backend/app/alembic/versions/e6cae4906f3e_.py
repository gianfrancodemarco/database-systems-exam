"""empty message

Revision ID: e6cae4906f3e
Revises: 433d303034ce
Create Date: 2022-11-22 21:27:09.442404

"""
import sqlalchemy as sa
from alembic import op
from app.db.custom_types import utcnow
from sqlalchemy.dialects.oracle import TIMESTAMP
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision = 'e6cae4906f3e'
down_revision = '433d303034ce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('SENSOR',
        sa.Column(
            "id",
            sa.Integer,
            sa.Identity(),
            primary_key=True,
        ),    
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('name', sa.String(100)),
        sa.Column('fruit_size', sa.Enum('LITTLE', 'MEDIUM', 'BIG', name='fruitsizeenum'), server_default='MEDIUM', nullable=False),
        sa.Column('medium_energy_consumption', sa.Float(), server_default='1', nullable=True),
        sa.Column('cost', sa.Float(), server_default='50', nullable=True),
        sa.Column('brand', sa.String(length=100), nullable=True),
    )
    op.create_index(op.f('ix_SENSOR_name'), 'SENSOR', ['name'], unique=False)
    op.create_table('SENSOR_FRUIT_ANALYSIS',
        sa.Column(
            "id",
            sa.Integer,
            sa.Identity(),
            primary_key=True,
        ),
        sa.Column('description', sa.String(length=1000), nullable=True),
        sa.Column('sensor_id', sa.Integer(), nullable=False),
        sa.Column('lot_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['sensor_id'], ['SENSOR.id']),
        sa.ForeignKeyConstraint(['lot_id'], ['LOT.id']),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('sensor_id', 'lot_id')
    )

    op.create_table('TRIGGER_AUDITING',
        sa.Column(
            "id",
            sa.Integer,
            sa.Identity(),
            primary_key=True,
        ),    
        sa.Column('trigger_name', sa.String(length=100), nullable=False),
        sa.Column('description', sa.String(length=1000), nullable=True),
        sa.Column('timestamp', TIMESTAMP(), server_default=utcnow(), nullable=False),
    )

    op.execute(
        text(
            """
            CREATE OR REPLACE
            TRIGGER UPDATE_LOT_PRICE
            BEFORE INSERT OR UPDATE OF WEIGHT, RIPENS_LEVEL ON LOT
            FOR EACH ROW
            DECLARE
            base_price NUMBER;
            BEGIN
            SELECT base_price INTO base_price FROM FRUIT WHERE \:new.fruit_id = FRUIT.id;
            \:new.price := base_price * \:new.weight * (1 - ABS(0.5 - \:new.ripens_level));
            INSERT INTO TRIGGER_AUDITING (TRIGGER_NAME, DESCRIPTION) VALUES ('UPDATE_LOT_PRICE', CONCAT(CONCAT(CONCAT('Run trigger UPDATE_LOT_PRICE on lot ', \:new.name), ' new price '), \:new.price));
            END;
            """
        )
    )
    
    op.execute(
        text(
            """
            CREATE OR REPLACE TRIGGER UPDATE_LOT_PRICE_ON_BASE_PRICE_CHANGE
            AFTER UPDATE OF base_price ON FRUIT
            FOR EACH ROW
            BEGIN
            UPDATE LOT SET PRICE = \:new.base_price * LOT.weight * (1 - ABS(0.5 - LOT.ripens_level))
            WHERE LOT.fruit_id = \:new.id;
            INSERT INTO TRIGGER_AUDITING (TRIGGER_NAME, DESCRIPTION) VALUES ('UPDATE_LOT_PRICE_ON_BASE_PRICE_CHANGE', CONCAT('Updated all prices for lots of ', \:new.name));
            END;
            """
        )
    )

    op.execute(
        text(
            """
            CREATE OR REPLACE TRIGGER CHECK_SENSOR_TYPE
            BEFORE UPDATE OR INSERT ON SENSOR_FRUIT_ANALYSIS
            FOR EACH ROW
            DECLARE
            fruit_id NUMBER;
            lot_fruit_size VARCHAR2(10);
            sensor_fruit_size VARCHAR2(10);
            BEGIN
            SELECT fruit_id INTO fruit_id FROM LOT WHERE LOT.id = \:new.lot_id;
            SELECT "size" INTO lot_fruit_size FROM FRUIT WHERE FRUIT.id = fruit_id;
            SELECT fruit_size INTO sensor_fruit_size FROM SENSOR WHERE SENSOR.id = \:new.sensor_id;
            IF sensor_fruit_size != lot_fruit_size THEN
                raise_application_error(-20042, 'Sensor fruit size and fruit size mismatch');
            END IF;
            END;
            """
        )
    )

    op.execute(
        text(
            """
            CREATE OR REPLACE PROCEDURE CHECK_AND_UPDATE_LOT_EXPIRATION AS
            COUNT_UPDATED_LOT NUMBER;
            BEGIN

            SELECT COUNT(*) INTO COUNT_UPDATED_LOT 
            FROM LOT
            INNER JOIN FRUIT ON FRUIT.ID = LOT.FRUIT_ID
            WHERE (TIMESTAMP_ARRIVAL + FRUIT.MAXIMUM_STATIONARY_TIME * interval '1' hour) < CURRENT_DATE AND LOT.EXPIRED != 1;
            
            UPDATE
            ( 
                SELECT * FROM LOT
                INNER JOIN FRUIT ON FRUIT.ID = LOT.FRUIT_ID
                WHERE (TIMESTAMP_ARRIVAL + FRUIT.MAXIMUM_STATIONARY_TIME * interval '1' hour) < CURRENT_DATE AND LOT.EXPIRED != 1
            ) T 
            SET T.EXPIRED = 1, T.ON_DISPLAY = 0;

            IF COUNT_UPDATED_LOT > 0 THEN
                INSERT INTO TRIGGER_AUDITING (TRIGGER_NAME, DESCRIPTION) VALUES ('CHECK_AND_UPDATE_LOT_EXPIRATION', CONCAT(COUNT_UPDATED_LOT, ' lots have expired.'));
            END IF;
            END;
            """
        )
    )

    op.execute(
        text(
            """
            BEGIN 
            dbms_scheduler.create_job ( 
                job_name => 'CHECK_AND_UPDATE_LOT_EXPIRATION_JOB', 
                job_type => 'PLSQL_BLOCK', 
                job_action => 'CHECK_AND_UPDATE_LOT_EXPIRATION();', 
                enabled => true,   
                start_date        => SYSTIMESTAMP,
                repeat_interval => 'FREQ=MINUTELY;INTERVAL=1'
            );
            END;
            """
        )
    )

    op.execute(
        text(
            """
            CREATE OR REPLACE TRIGGER CHECK_ON_DISPLAY_ON_EXPIRED_LOT
            BEFORE UPDATE OR INSERT ON LOT
            FOR EACH ROW
            BEGIN
            IF \:new.expired = 1 AND \:new.on_display = 1 THEN
                raise_application_error(-20042, 'Cannot put on display an expired lot');
            END IF;
            END;
            """
        )
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('SENSOR_FRUIT_ANALYSIS')
    op.drop_index(op.f('ix_SENSOR_name'), table_name='SENSOR')
    op.drop_table('SENSOR')
    op.execute(text("""DROP TRIGGER UPDATE_LOT_PRICE"""))
    op.execute(text("""DROP TRIGGER UPDATE_LOT_PRICE_ON_BASE_PRICE_CHANGE"""))
    op.execute(text("""DROP TRIGGER CHECK_SENSOR_TYPE"""))
    op.execute(text("""DROP TRIGGER CHECK_ON_DISPLAY_ON_EXPIRED_LOT"""))
    op.execute(text("""DROP PROCEDURE CHECK_AND_UPDATE_LOT_EXPIRATION"""))
    op.execute(text("""
        BEGIN
            dbms_scheduler.drop_Job (Job_Name => 'CHECK_AND_UPDATE_LOT_EXPIRATION_JOB');
        END;
    """))
    op.execute(text("""DROP TRIGGER CHECK_ON_DISPLAY_ON_EXPIRED_LOT"""))
    # ### end Alembic commands ###
